name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Prepare
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: '$(my_pub_key)'
        sshKeySecureFile: 'id_az_udacity'

    - task: Bash@3
      inputs:
        targetType: 'inline'
        script: 'ls -lah ~/.ssh/'

    - task: TerraformInstaller@0
      displayName: install terraform
      inputs:
        terraformVersion: latest
      
    - task: TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        environmentServiceName: 'udacity-az-devops-3-sc'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        backendType: 'azurerm'
        backendServiceArm: 'udacity-az-devops-3-tf'
        backendAzureRmResourceGroupName: '$(tf_resource_group_name)'
        backendAzureRmStorageAccountName: '$(tf_storage_account_name)'
        backendAzureRmContainerName: '$(tf_container_name)'
        backendAzureRmKey: test.terraform.tfstate

    - task: TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: plan
        environmentServiceName: 'udacity-az-devops-3-sc'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        publishPlanResults: 'udacity-az-devops-3'
        commandOptions: '-out=$(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfplan -detailed-exitcode -var pub_key=$(my_pub_key)'
        secureVarsFile: terraform.tfvars

    - task: TerraformCLI@0
      displayName: 'terraform apply'
      condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
      inputs:
        command: apply
        environmentServiceName: 'udacity-az-devops-3-sc'
        commandOptions: '$(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfplan'

- stage: Build
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: 'automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload Package'
      artifact: drop-fakerestapi
# - stage: Deployment
#   jobs:
#   - deployment: FakeRestAPI
#     pool:
#       vmImage: 'Ubuntu-16.04'
#     environment: 'TEST'
#     strategy:
#       runOnce:
#         deploy:
#           steps:
#           - task: AzureWebApp@1
#             displayName: 'Deploy Azure Web App'
#             inputs:
#               azureSubscription: '$(SUBSCRIPTION_ID)'
#               appName: '$(APP_NAME)'
#               appType: webApp
#               package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip
  # - deployment: VMDeploy
  #   displayName: NAME
  #   environment:
  #     name:  ENVIRONMENT NAME
  #     resourceType: VirtualMachine
  #     tags: TAG NAME
  #   strategy:
  #     runOnce:
  #       deploy:
  #         steps:
  #         - task: Bash@3
  #           inputs:
  #             targetType: 'inline'
  #             script: |
  #               #! /bin/bash
                
  #               sudo apt-get upgrade -y
  #               sudo apt-get install python3-pip -y
  #               sudo apt-get install unzip -y
  #               sudo apt-get install -y chromium-browser
  #               pip3 install selenium
  #               export PATH=$PATH:some/path


