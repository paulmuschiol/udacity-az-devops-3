name: Azure Pipelines
variables:
  python.version: '3.7.6'
stages:
- stage: Prepare
  jobs:
  - job: Build
    pool:
      name: Hosted Ubuntu 1604
    steps:
    # Needed for Terraform VM deployment
    - task: InstallSSHKey@0
      inputs:
        knownHostsEntry: 'ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAq2A7hRGmdnm9tUDbO9IDSwBK6TbQa+PXYPCPy6rbTrTtw7PHkccKrpp0yVhp5HdEIcKr6pLlVDBfOLX9QUsyCOV0wzfjIJNlGEYsdlLJizHhbn2mUjvSAHQqZETYP81eFzLQNnPHt4EVVUh7VfDESU84KezmD5QlWpXLmvU31/yMf+Se8xhHTvKSCZIFImWwoG6mbUoWf9nzpIoaSjB+weqqUUmpaaasXVal72J+UX2B+2RPW3RcT0eOzQgqlJL3RKrTJvdsjE3JEAvGq3lGHSZXy28G3skua2SmVi/w4yCE6gbODqnTWlg7+wC604ydGXA8VJiS5ap43JXiUFFAaQ=='
        sshPublicKey: '$(az_udacity_id_rsa_pub)'
        sshKeySecureFile: 'az_udacity_id_rsa'

    - task: DownloadSecureFile@1
      displayName: Download terraform.tfvars
      inputs:
        secureFile: 'terraform.tfvars' 

    - bash: |
        cp $(Agent.TempDirectory)/terraform.tfvars $(System.DefaultWorkingDirectory)/terraform/environments/test/
      displayName: Copy terraform.tfvars to manifests

    - task: TerraformInstaller@0
      displayName: install terraform
      inputs:
        terraformVersion: latest
      
    - task: TerraformCLI@0
      displayName: 'terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        environmentServiceName: 'udacity-az-devops-3-sc'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        backendType: 'azurerm'
        backendServiceArm: 'udacity-az-devops-3-sc'
        backendAzureRmResourceGroupName: '$(tf_resource_group_name)'
        backendAzureRmStorageAccountName: '$(tf_storage_account_name)'
        backendAzureRmContainerName: '$(tf_container_name)'
        backendAzureRmKey: test.terraform.tfstate

    - task: TerraformCLI@0
      displayName: 'terraform plan'
      inputs:
        command: plan
        environmentServiceName: 'udacity-az-devops-3-sc'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        publishPlanResults: 'udacity-az-devops-3'
        commandOptions: '-var "pub_key=$(az_udacity_id_rsa_pub)" -out=terraform.tfplan -detailed-exitcode'
        secureVarsFile: terraform.tfvars
        runAzLogin: 'true'

    - task: TerraformCLI@0
      displayName: 'terraform apply'
      condition: and(succeeded(), eq(variables['TERRAFORM_PLAN_HAS_CHANGES'], 'true'))
      inputs:
        command: apply
        environmentServiceName: 'udacity-az-devops-3-sc'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test/'
        commandOptions: 'terraform.tfplan'
        runAzLogin: true

- stage: Build
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-18.04'
    steps:
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Upload FakeRestAPI Package'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive Selenium'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium.zip
      displayName: 'Upload Selenium Package'
      artifact: drop-selenium

- stage: Deployment
  jobs:
  - deployment: FakeRestAPI
    displayName: 'Deploy Web App'
    pool:
      vmImage: 'Ubuntu-18.04'
    environment: 'TEST'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: 'udacity-az-devops-3-sc'
              appName: '$(APP_NAME)'
              appType: webApp
              package: $(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip

  - deployment: VMDeploy
    displayName: Setup VM for Selenium Tests
    environment:
      name:  TEST
      resourceType: VirtualMachine
      tags: default
    strategy:
      runOnce:
        deploy:
          steps:
          - task: Bash@3
            displayName: Install Dependencies
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                sudo apt install software-properties-common -y
                sudo add-apt-repository ppa:deadsnakes/ppa -y
                sudo apt update
                sudo apt-get upgrade -y
                sudo apt install python3.7 -y

                sudo apt-get install python3-pip -y
                sudo apt-get install unzip -y
                sudo apt-get install -y chromium-browser
                python3 -m pip3 install --upgrade pip3

                # check versions
                pip3 install selenium
                python3 -V
                pip3 -V
                /usr/bin/chromium-browser --version
                /usr/bin/chromedriver --version
                python3 -c "import selenium; print('Selenium Version:', selenium.__version__)"

                # set environment variable
                export PATH=$PATH:/usr/bin/chromium-browser
                export PATH=$PATH:/usr/bin/chromedriver

          - task: Bash@3
            displayName: Drop Selenium Artifacts
            inputs:
              targetType: 'inline'
              script: |
                #! /bin/bash
                
                rm -r selenium_files
                mkdir selenium_files
                cd selenium_files
                cp $(Pipeline.Workspace)/drop-selenium/selenium-$(Build.BuildId).zip .
                pwd
                ls -lah
                unzip -o selenium-$(Build.BuildId).zip
                pwd
                ls -lah

- stage: Test
  jobs:
  - job: api_test
    displayName: Test Postman (using Newman CLI)
    pool:
      vmImage: 'ubuntu-18.04'
    steps: 
    - task: NodeTool@0
      displayName: Install Node 12
      inputs:
        versionSpec: '12.x'
    - bash: |
        pwd
        npm install -g newman
        newman --version
        mkdir -p log_newman
        ls -lah
      displayName: Install Newman
    - bash: |
        newman run automatedtesting/postman/regression_test.postman_collection.json \
                  -e automatedtesting/postman/starterAPIs_regression_test.postman_environment.json \
                  --reporter-junit-export log_newman/regression-test-export.xml \
                  --reporters cli,junit \
                  --suppress-exit-code
      displayName: Regression Test Suite (newman)
    - bash: |
        newman run automatedtesting/postman/validation_test.postman_collection.json \
                  -e automatedtesting/postman/starterAPIs_validation_test.postman_environment.json \
                  --reporters cli,junit \
                  --reporter-junit-export log_newman/validation-test.xml \
                  --suppress-exit-code
      displayName: Validation Test Suite (newman)
    - task: PublishPipelineArtifact@1
      displayName: Publish API test logs
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/log_newman'
        artifactName: 'drop-newman-logs'
    - task: PublishTestResults@2
      displayName: 'Publish Regression and Validation test results'
      inputs:
        testRunner: 'JUnit'
        searchFolder: '$(System.DefaultWorkingDirectory)/log_newman'
        testResultsFiles: '*.xml'
        mergeTestResults: true
        testRunTitle: 'Newman Regression and Validation test results'

